"""
Unified Communication X (UCX) is an award winning, optimized production proven-communication framework for modern, high-bandwidth and low-latency networks.
"""

load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")
load("@//build_deps/bazel_rules:extract_from_filegroup.bzl", "find_and_group_outputs")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "all_srcs",
    srcs = glob(["**"]),
    visibility = ["//visibility:private"],
)

exports_files(["BUILD.bazel"])

configure_make(
    name = "ucx",
    args = [
        "-j$(nproc)",
    ],
    autogen = True,
    configure_command = "./contrib/configure-release-mt",
    configure_in_place = True,
    configure_options = [
        # "--enable-ucg",  # ucg is out-of-date, use ucc now
        "--with-avx",
        "--with-march",
        "--enable-compiler-opt",
        "--enable-optimizations",
        "--enable-cma",
        "--with-rc",
        "--with-ud",
        "--with-dc",
        "--with-ib-hw-tm",
        "--with-dm",
        "--enable-tuning",
        "--with-fuse3=guess",
        "--with-mad=guess",
        "--with-gdrcopy=guess",
        "--with-mlx5=guess",
        # "--with-verbs=guess",  # Seems OpenFabrics verbs not compatible with mlx5?
        "--with-rdmacm=guess",
        "--with-knem=guess",
        "--with-xpmem=guess",
        "--with-java=no",
        "--with-go=no",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            "--with-cuda",
        ],
        "//conditions:default": [
        ],
    }),
    copts = [
        "-Wno-error",
    ],
    lib_source = "@ucx//:all_srcs",
    out_bin_dir = "bin",
    out_binaries = [
        "io_demo",
        "ucx_info",
        "ucx_perftest",
        "ucx_perftest_daemon",
        "ucx_read_profile",
    ],
    out_include_dir = "include",
    out_lib_dir = "lib",
    out_shared_libs = [
        "libucm.so",
        "libucm.so.0",
        "libucm.so.0.0.0",
        "libucp.so",
        "libucp.so.0",
        "libucp.so.0.0.0",
        "libucs_signal.so",
        "libucs_signal.so.0",
        "libucs_signal.so.0.0.0",
        "libucs.so",
        "libucs.so.0",
        "libucs.so.0.0.0",
        "libuct.so",
        "libuct.so.0",
        "libuct.so.0.0.0",
        "ucx/libuct_cma.so",
        "ucx/libuct_cma.so.0",
        "ucx/libuct_cma.so.0.0.0",
        "ucx/libuct_ib.so",
        "ucx/libuct_ib.so.0",
        "ucx/libuct_ib.so.0.0.0",
        "ucx/libuct_ib_mlx5.so",
        "ucx/libuct_ib_mlx5.so.0",
        "ucx/libuct_ib_mlx5.so.0.0.0",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            "ucx/libucm_cuda.so",
            "ucx/libucm_cuda.so.0",
            "ucx/libucm_cuda.so.0.0.0",
            "ucx/libuct_cuda.so",
            "ucx/libuct_cuda.so.0",
            "ucx/libuct_cuda.so.0.0.0",
        ],
        "//conditions:default": [
        ],
    }),
    out_static_libs = [
        "libucm.a",
        "libucp.a",
        "libucs_signal.a",
        "libucs.a",
        "libuct.a",
        "ucx/libuct_cma.a",
        "ucx/libuct_ib.a",
        "ucx/libuct_ib_mlx5.a",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            "ucx/libucm_cuda.a",
            "ucx/libuct_cuda.a",
        ],
        "//conditions:default": [
        ],
    }),
    visibility = ["//visibility:public"],
    deps = select({
        "@rules_cuda//cuda:is_enabled": [
            "@rules_cuda//cuda:runtime",
        ],
        "//conditions:default": [
        ],
    }),
)

filegroup(
    name = "ucx_gen_dir",
    srcs = [":ucx"],
    output_group = "gen_dir",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "_ucx_header_includes",
    srcs = [":ucx"],
    output_group = "include",
)

cc_library(
    name = "ucx_headers",
    hdrs = [
        ":_ucx_header_includes",
    ],
    includes = ["ucx/include"],
    visibility = ["//visibility:public"],
)

find_and_group_outputs(
    name = "_lib_ucm_cuda",
    pattern = "libucm.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_ucm_cuda_static",
    pattern = "libucm.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_ucm_cuda",
    shared_library = ":_lib_ucm_cuda",
    static_library = ":_lib_ucm_cuda_static",
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_ucm",
    pattern = "libucm.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_ucm_static",
    pattern = "libucm.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_ucm",
    shared_library = ":_lib_ucm",
    static_library = ":_lib_ucm_static",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ucm",
    includes = ["include"],
    linkopts = [
        "-Wl,--as-needed",
    ],
    linkstatic = False,
    deps = [
        ":ucx_headers",
        ":lib_ucm",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            ":lib_ucm_cuda",
        ],
        "//conditions:default": [
        ],
    }),
)

cc_library(
    name = "ucm_static",
    includes = ["include"],
    linkopts = [
        "-Wl,--as-needed",
    ],
    linkstatic = True,
    deps = [
        ":ucx_headers",
        ":lib_ucm",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            ":lib_ucm_cuda",
        ],
        "//conditions:default": [
        ],
    }),
)

find_and_group_outputs(
    name = "_lib_ucs_signal",
    pattern = "libucs_signal.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_ucs_signal_static",
    pattern = "libucs_signal.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_ucs_signal",
    shared_library = ":_lib_ucs_signal",
    static_library = ":_lib_ucs_signal_static",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ucs_signal",
    linkstatic = False,
    deps = [
        ":lib_ucs_signal",
        ":ucx_headers",
    ],
)

cc_library(
    name = "ucs_signal_static",
    linkstatic = True,
    deps = [
        ":lib_ucs_signal",
        ":ucx_headers",
    ],
)

find_and_group_outputs(
    name = "_lib_ucs",
    pattern = "libucs.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_ucs_static",
    pattern = "libucs.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_ucs",
    shared_library = ":_lib_ucs",
    static_library = ":_lib_ucs_static",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ucs",
    linkopts = [
        "-Wl,--undefined=ucs_init,--as-needed",
        "-ldl",
        "-lrt",
        "-lm",
        "-pthread",
    ],
    linkstatic = False,
    visibility = ["@ucc//:__pkg__"],
    deps = [
        ":lib_ucs",
        ":ucm",
        ":ucs_signal",  # unknown bug
        ":ucx_headers",
    ],
)

cc_library(
    name = "ucs_static",
    linkopts = [
        "-Wl,--undefined=ucs_init,--as-needed",
        "-ldl",
        "-lrt",
        "-lm",
        "-pthread",
    ],
    linkstatic = True,
    visibility = ["@ucc//:__pkg__"],
    deps = [
        ":lib_ucs",
        ":ucm_static",
        ":ucs_signal_static",  # unknown bug
        ":ucx_headers",
    ],
)

find_and_group_outputs(
    name = "_lib_uct_cma",
    pattern = "libuct_cma.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_uct_cma_static",
    pattern = "libuct_cma.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_uct_cma",
    shared_library = ":_lib_uct_cma",
    static_library = ":_lib_uct_cma_static",
    visibility = ["//visibility:public"],
)

find_and_group_outputs(
    name = "_lib_uct_ib",
    pattern = "libuct_ib.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_uct_ib_static",
    pattern = "libuct_ib.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_uct_ib",
    shared_library = ":_lib_uct_ib",
    static_library = ":_lib_uct_ib_static",
    visibility = ["//visibility:public"],
)

find_and_group_outputs(
    name = "_lib_uct_ib_mlx5",
    pattern = "libuct_ib_mlx5.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_uct_ib_mlx5_static",
    pattern = "libuct_ib_mlx5.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_uct_ib_mlx5",
    shared_library = ":_lib_uct_ib_mlx5",
    static_library = ":_lib_uct_ib_mlx5_static",
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_uct_cuda",
    pattern = "libuct_cuda.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_uct_cuda_static",
    pattern = "libuct_cuda.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_uct_cuda",
    shared_library = ":_lib_uct_cuda",
    static_library = ":_lib_uct_cuda_static",
    visibility = ["//visibility:public"],
)

find_and_group_outputs(
    name = "_lib_uct",
    pattern = "libuct.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_uct_static",
    pattern = "libuct.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_uct",
    shared_library = ":_lib_uct",
    static_library = ":_lib_uct_static",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "uct",
    linkopts = [
        "-Wl,--undefined=uct_init,--as-needed",
    ],
    linkstatic = False,
    deps = [
        ":lib_uct",
        ":ucs",
        ":ucx_headers",
        ":lib_uct_cma",
        ":lib_uct_ib",
        ":lib_uct_ib_mlx5",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            ":lib_uct_cuda",
        ],
        "//conditions:default": [
        ],
    }),
)

cc_library(
    name = "uct_static",
    linkopts = [
        "-Wl,--undefined=uct_init,--as-needed",
    ],
    linkstatic = True,
    deps = [
        ":lib_uct",
        ":ucs_static",
        ":ucx_headers",
        ":lib_uct_cma",
        ":lib_uct_ib",
        ":lib_uct_ib_mlx5",
    ] + select({
        "@rules_cuda//cuda:is_enabled": [
            ":lib_uct_cuda",
        ],
        "//conditions:default": [
        ],
    }),
)

find_and_group_outputs(
    name = "_lib_ucp",
    pattern = "libucp.so",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

find_and_group_outputs(
    name = "_lib_ucp_static",
    pattern = "libucp.a",
    targets_to_inspect = [":ucx"],
    visibility = ["//visibility:private"],
)

cc_import(
    name = "lib_ucp",
    shared_library = ":_lib_ucp",
    static_library = ":_lib_ucp_static",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ucp",
    linkopts = [
        "-Wl,--undefined=ucp_global_init,--as-needed",
    ],
    linkstatic = False,
    deps = [
        ":lib_ucp",
        ":ucx_headers",
    ],
)

cc_library(
    name = "ucp_static",
    linkopts = [
        "-Wl,--undefined=ucp_global_init,--as-needed",
    ],
    linkstatic = True,
    deps = [
        ":lib_ucp",
        ":ucx_headers",
    ],
)

cc_library(
    name = "ucx_runtime",
    linkstatic = False,
    visibility = ["//visibility:public"],
    deps = [
        ":ucp",
        ":ucs",
        ":uct",
        ":ucx_headers",
    ],
)

cc_library(
    name = "ucx_runtime_static",
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [
        ":ucp_static",
        ":ucs_static",
        ":uct_static",
        ":ucx_headers",
    ],
)
